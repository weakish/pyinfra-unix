"""
This type stub file was generated by pyright.
"""

import sys
import base64
import __builtin__ as builtins
import cStringIO
import builtins
import io

__all__ = ["BytesIO", "MAXSIZE", "PY2", "StringIO", "b", "b2s", "builtins", "byte_chr", "byte_mask", "byte_ord", "bytes", "bytes_types", "decodebytes", "encodebytes", "input", "integer_types", "is_callable", "long", "next", "string_types", "text_type", "u"]
PY2 = sys.version_info[0] < 3
if PY2:
    string_types = basestring
    text_type = unicode
    bytes_types = str
    bytes = str
    integer_types = (int, long)
    long = long
    input = raw_input
    decodebytes = base64.decodestring
    encodebytes = base64.encodestring
    byte_ord = ord
    byte_chr = chr
    def byte_mask(c, mask):
        ...
    
    def b(s, encoding=...):
        """cast unicode or bytes to bytes"""
        ...
    
    def u(s, encoding=...):
        """cast bytes or unicode to unicode"""
        ...
    
    def b2s(s):
        ...
    
    StringIO = cStringIO.StringIO
    BytesIO = StringIO
    def is_callable(c):
        ...
    
    def get_next(c):
        ...
    
    def next(c):
        ...
    
    class X(object):
        def __len__(self):
            ...
        
    
    
else:
    string_types = str
    text_type = str
    bytes = bytes
    bytes_types = bytes
    integer_types = int
    class long(int):
        ...
    
    
    input = input
    decodebytes = base64.decodebytes
    encodebytes = base64.encodebytes
    def byte_ord(c):
        ...
    
    def byte_chr(c):
        ...
    
    def byte_mask(c, mask):
        ...
    
    def b(s, encoding=...):
        """cast unicode or bytes to bytes"""
        ...
    
    def u(s, encoding=...):
        """cast bytes or unicode to unicode"""
        ...
    
    def b2s(s):
        ...
    
    StringIO = io.StringIO
    BytesIO = io.BytesIO
    def is_callable(c):
        ...
    
    def get_next(c):
        ...
    
    next = next
    MAXSIZE = sys.maxsize
