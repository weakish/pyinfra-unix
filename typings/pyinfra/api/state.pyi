"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Any, Optional

def _make_name(current, new):
    '''
    Stops duplication between similarly named nested deploys, eg:

    Turn:
        Deploy Kubernetes master/Configure Kubernetes
    Into:
        Deploy Kubernetes master/Configure
    '''
    ...

class State(object):
    '''
    Manages state for a pyinfra deploy.
    '''
    initialised = ...
    inventory = ...
    config = ...
    pool = ...
    in_op = ...
    deploying = ...
    current_op_hash = ...
    loop_counter = ...
    loop_line = ...
    in_deploy = ...
    deploy_name = ...
    deploy_kwargs = ...
    deploy_data = ...
    deploy_line_numbers = ...
    print_output = ...
    print_input = ...
    print_fact_info = ...
    print_fact_output = ...
    print_fact_input = ...
    deploy_dir = ...
    current_op_file = ...
    def __init__(self, inventory: Optional[Any] = ..., config: Optional[Any] = ..., **kwargs):
        ...
    
    def init(self, inventory, config, initial_limit: Optional[Any] = ...):
        self.pool = ...
        self.fact_pool = ...
        self.ssh_connections = ...
        self.sftp_connections = ...
        self.private_keys = ...
        self.facts = ...
        self.fact_locks = ...
        self.inventory = ...
        self.config = ...
        self.activated_hosts = ...
        self.active_hosts = ...
        self.ready_hosts = ...
        self.failed_hosts = ...
        self.limit_hosts = ...
        self.op_line_numbers_to_hash = ...
        self.op_meta = ...
        self.ops_run = ...
        self.ops = ...
        self.facts = ...
        self.meta = ...
        self.results = ...
        self.initialised = ...
    
    def limit(self, hosts):
        ...
    
    @contextmanager
    def hosts(self, hosts):
        self.limit_hosts = ...
        self.limit_hosts = ...
    
    @contextmanager
    def when(self, predicate):
        ...
    
    @contextmanager
    def deploy(self, name, kwargs, data, line_number, in_deploy: bool = ...):
        '''
        Wraps a group of operations as a deploy, this should not be used
        directly, instead use ``pyinfra.api.deploy.deploy``.
        '''
        self.in_deploy = ...
        self.deploy_name = ...
        self.deploy_kwargs = ...
        self.deploy_data = ...
        self.deploy_line_numbers = ...
        self.in_deploy = ...
        self.deploy_name = ...
        self.deploy_kwargs = ...
        self.deploy_data = ...
        self.deploy_line_numbers = ...
    
    @contextmanager
    def preserve_loop_order(self, items):
        self.loop_line = ...
        self.loop_counter = ...
        self.loop_line = ...
    
    def get_op_order(self):
        ...
    
    def activate_host(self, host):
        '''
        Flag a host as active.
        '''
        ...
    
    def fail_hosts(self, hosts_to_fail, activated_count: Optional[Any] = ...):
        '''
        Flag a ``set`` of hosts as failed, error for ``config.FAIL_PERCENT``.
        '''
        ...
    
    def is_host_in_limit(self, host):
        '''
        Returns a boolean indicating if the host is within the current state limit.
        '''
        ...
    
    def get_temp_filename(self, hash_key: Optional[Any] = ...):
        '''
        Generate a temporary filename for this deploy.
        '''
        ...
    


