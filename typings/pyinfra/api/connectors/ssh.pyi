"""
This type stub file was generated by pyright.
"""

from pyinfra.api.util import memoize
from typing import Any, Optional

def make_names_data(hostname):
    ...

def _raise_connect_error(host, message, data):
    ...

def _get_private_key(state, key_filename, key_password):
    ...

def _make_paramiko_kwargs(state, host):
    ...

def connect(state, host):
    '''
    Connect to a single host. Returns the SSH client if succesful. Stateless by
    design so can be run in parallel.
    '''
    ...

def run_shell_command(state, host, command, get_pty: bool = ..., timeout: Optional[Any] = ..., stdin: Optional[Any] = ..., success_exit_codes: Optional[Any] = ..., print_output: bool = ..., print_input: bool = ..., return_combined_output: bool = ..., **command_kwargs):
    '''
    Execute a command on the specified host.

    Args:
        state (``pyinfra.api.State`` obj): state object for this command
        hostname (string): hostname of the target
        command (string): actual command to execute
        sudo (boolean): whether to wrap the command with sudo
        sudo_user (string): user to sudo to
        get_pty (boolean): whether to get a PTY before executing the command
        env (dict): envrionment variables to set
        timeout (int): timeout for this command to complete before erroring

    Returns:
        tuple: (exit_code, stdout, stderr)
        stdout and stderr are both lists of strings from each buffer.
    '''
    ...

@memoize
def _get_sftp_connection(host):
    ...

def _get_file(host, remote_filename, filename_or_io):
    ...

def get_file(state, host, remote_filename, filename_or_io, sudo: bool = ..., sudo_user: Optional[Any] = ..., su_user: Optional[Any] = ..., print_output: bool = ..., print_input: bool = ..., **command_kwargs):
    '''
    Download a file from the remote host using SFTP. Supports download files
    with sudo by copying to a temporary directory with read permissions,
    downloading and then removing the copy.
    '''
    ...

def _put_file(host, filename_or_io, remote_location):
    ...

def put_file(state, host, filename_or_io, remote_filename, sudo: bool = ..., sudo_user: Optional[Any] = ..., su_user: Optional[Any] = ..., print_output: bool = ..., print_input: bool = ..., **command_kwargs):
    '''
    Upload file-ios to the specified host using SFTP. Supports uploading files
    with sudo by uploading to a temporary directory then moving & chowning.
    '''
    ...

