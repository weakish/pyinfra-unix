"""
This type stub file was generated by pyright.
"""

from pyinfra.api.util import memoize
from typing import Any, Optional

def _raise_connect_error(host, message, data):
    ...

@memoize
def show_warning():
    ...

def _make_winrm_kwargs(state, host):
    ...

def make_names_data(hostname):
    ...

def connect(state, host):
    '''
    Connect to a single host. Returns the winrm Session if successful.
    '''
    ...

def run_shell_command(state, host, command, get_pty: bool = ..., sudo: Optional[Any] = ..., sudo_user: Optional[Any] = ..., su_user: Optional[Any] = ..., use_sudo_login: bool = ..., use_su_login: bool = ..., preserve_sudo_env: bool = ..., timeout: Optional[Any] = ..., stdin: Optional[Any] = ..., success_exit_codes: Optional[Any] = ..., print_output: bool = ..., print_input: bool = ..., return_combined_output: bool = ..., shell_executable=..., **command_kwargs):
    '''
    Execute a command on the specified host.

    Args:
        state (``pyinfra.api.State`` obj): state object for this command
        hostname (string): hostname of the target
        command (string): actual command to execute
        get_pty (boolean): Not used for WINRM
        sudo (boolean): Not used for WINRM
        sudo_user (string): Not used for WINRM
        use_sudo_login(boolean): Not used for WINRM
        use_su_login(boolean): Not used for WINRM
        preserve_sudo_env(boolean): Not used for WINRM
    TODO: check if winrm has a timeout and use timeout param
        timeout (int): timeout for this command to complete before erroring
        stdin (string): Not used for WINRM
        success_exit_codes (list): all values in the list that will return success
        print_output (boolean): print the output
        TODO print_intput (boolean): print the input
        return_combined_output (boolean): combine the stdout and stderr lists
        shell_executable (string): shell to use - 'sh'=cmd, 'ps'=powershell(default)
        env (dict): envrionment variables to set

    Returns:
        tuple: (exit_code, stdout, stderr)
        stdout and stderr are both lists of strings from each buffer.
    '''
    ...

def get_file(state, host, remote_filename, filename_or_io, **command_kwargs):
    ...

def put_file(state, host, filename_or_io, remote_filename, **command_kwargs):
    ...

