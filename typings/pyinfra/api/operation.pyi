"""
This type stub file was generated by pyright.
"""

from typing import Any, Generator, Optional, Callable, Dict, Union, List
from pyinfra.api.state import State
from pyinfra.api.host import Host

'''
Operations are the core of pyinfra. The ``@operation`` wrapper intercepts calls
to the function and instead diff against the remote server, outputting commands
to the deploy state. This is then run later by pyinfra's ``__main__`` or the
:doc:`./pyinfra.api.operations` module.
'''
OPERATIONS = []
def get_operation_names():
    '''
    Returns a list of available operations.
    '''
    ...

class OperationMeta(object):
    def __init__(self, hash: Optional[Any] = ..., commands: Optional[Any] = ...):
        self.commands = ...
        self.hash = ...
        self.changed = ...
    
    def __repr__(self):
        '''Return Operation object as a string.'''
        ...
    


def add_op(state, op_func, *args, **kwargs):
    '''
    Prepare & add an operation to ``pyinfra.state`` by executing it on all hosts.

    Args:
        state (``pyinfra.api.State`` obj): the deploy state to add the operation
        to op_func (function): the operation function from one of the modules,
        ie ``server.user``
        args/kwargs: passed to the operation function
    '''
    ...

def add_limited_op(state, op_func, hosts, *args, **kwargs):
    '''
    DEPRECATED: please use ``add_op`` with the ``hosts`` kwarg.
    '''
    ...

def _get_call_location():
    ...

def operation(
    func: Callable[[State, Host], Union[str, Dict[str, Any], Generator[str, None, None], Generator[Dict[str, Any], None, None]]],
    pipeline_facts: Optional[Any] = ...) -> Callable[..., OperationMeta]:
    '''
    Decorator that takes a simple module function and turn it into the internal
    operation representation that consists of a list of commands + options
    (sudo, (sudo|su)_user, env).
    '''
    ...

