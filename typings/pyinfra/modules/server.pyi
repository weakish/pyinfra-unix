"""
This type stub file was generated by pyright.
"""

from pyinfra.api import operation
from typing import Any, Optional

'''
The server module takes care of os-level state. Targets POSIX compatibility, tested on
Linux/BSD.
'''
@operation
def reboot(state, host, delay=..., interval=..., reboot_timeout=...):
    '''
    Reboot the server and wait for reconnection.

    + delay: number of seconds to wait before attempting reconnect
    + interval: interval (s) between reconnect attempts
    + reboot_timeout: total time before giving up reconnecting

    Note: Probably want sudo enabled.

    Example:

    .. code:: python

        server.reboot(
            {'Reboot the server and wait to reconnect'},
            delay=5,
            timeout=30,
        )

    '''
    ...

@operation
def wait(state, host, port: Optional[Any] = ...):
    '''
    Waits for a port to come active on the target machine. Requires netstat, checks every
    second.

    + port: port number to wait for

    Example:

    .. code:: python

        server.wait(
            {'Wait for webserver to start'},
            port=80,
        )

    '''
    ...

@operation
def shell(state, host, commands, chdir: Optional[Any] = ...):
    '''
    Run raw shell code on server during a deploy. If the command would
    modify data that would be in a fact, the fact would not be updated
    since facts are only run at the start of a deploy.

    + commands: command or list of commands to execute on the remote server
    + chdir: directory to cd into before executing commands

    Example:

    .. code:: python

        server.shell(
            {'Run lxd auto init'},
            'lxd init --auto',
        )

    '''
    ...

@operation
def script(state, host, filename, chdir: Optional[Any] = ...):
    '''
    Upload and execute a local script on the remote host.

    + filename: local script filename to upload & execute
    + chdir: directory to cd into before executing the script

    Example:

    .. code:: python

        # Note: This assumes there is a file in files/hello.bash locally.
        server.script(
            {'Hello'},
            'files/hello.bash',
        )

    '''
    ...

@operation
def script_template(state, host, template_filename, chdir: Optional[Any] = ..., **data):
    '''
    Generate, upload and execute a local script template on the remote host.

    + template_filename: local script template filename
    + chdir: directory to cd into before executing the script

    Example:

    .. code:: python

        # Example showing how to pass python variable to a script template file.
        # The .j2 file can use `{{ some_var }}` to be interpolated.
        # To see output need to run pyinfra with '-v'
        # Note: This assumes there is a file in templates/hello2.bash.j2 locally.
        some_var = 'blah blah blah '
        server.script_template(
            {'Hello from script'},
            'templates/hello2.bash.j2',
            some_var=some_var,
        )

    '''
    ...

@operation
def modprobe(state, host, name, present: bool = ..., force: bool = ...):
    '''
    Load/unload kernel modules.

    + name: name of the module to manage
    + present: whether the module should be loaded or not
    + force: whether to force any add/remove modules

    Example:

    .. code:: python

        server.modprobe(
            {'Silly example for modprobe'},
            'floppy',
        )

    '''
    ...

@operation
def mount(state, host, name, mounted: bool = ..., options: Optional[Any] = ...):
    '''
    Manage mounted filesystems.

    + name: the path of the mounted filesystem
    + mounted: whether the filesystem should be mounted
    + options: the mount options

    Options:
        If the currently mounted filesystem does not have all of the provided
        options it will be remounted with the options provided.

    ``/etc/fstab``:
        This operation does not attempt to modify the on disk fstab file - for
        that you should use the `files.line operation <./files.html#files-line>`_.
    '''
    ...

@operation
def hostname(state, host, hostname, hostname_file: Optional[Any] = ...):
    '''
    Set the system hostname.

    + hostname: the hostname that should be set
    + hostname_file: the file that permanently sets the hostname

    Hostname file:
        By default pyinfra will auto detect this by targetting ``/etc/hostname``
        on Linux and ``/etc/myname`` on OpenBSD.

        To completely disable writing the hostname file, set ``hostname_file=False``.

    Example:

    .. code:: python

        server.hostname(
            {'Set the hostname'},
            'server1.example.com',
        )
    '''
    ...

@operation
def sysctl(state, host, name, value, persist: bool = ..., persist_file=...):
    '''
    Edit sysctl configuration.

    + name: name of the sysctl setting to ensure
    + value: the value or list of values the sysctl should be
    + persist: whether to write this sysctl to the config
    + persist_file: file to write the sysctl to persist on reboot

    Example:

    .. code:: python

        server.sysctl(
            {'Change the fs.file-max value'},
            'fs.file-max',
            '100000',
            persist=True,
        )
    '''
    ...

@operation
def crontab(state, host, command, present: bool = ..., user: Optional[Any] = ..., name: Optional[Any] = ..., minute=..., hour=..., month=..., day_of_week=..., day_of_month=...):
    '''
    Add/remove/update crontab entries.

    + command: the command for the cron
    + present: whether this cron command should exist
    + user: the user whose crontab to manage
    + name: name the cronjob so future changes to the command will overwrite
    + minute: which minutes to execute the cron
    + hour: which hours to execute the cron
    + month: which months to execute the cron
    + day_of_week: which day of the week to execute the cron
    + day_of_month: which day of the month to execute the cron

    Cron commands:
        Unless ``name`` is specified the command is used to identify crontab entries.
        This means commands must be unique within a given users crontab. If you require
        multiple identical commands, provide a different name argument for each.

    Example:

    .. code:: python

        # simple example for a crontab
        server.crontab(
            {'Backup /etc weekly'},
            '/bin/tar cf /tmp/etc_bup.tar /etc',
            name='backup_etc',
            day_of_week=0,
            hour=1,
            minute=0,
        )

    '''
    ...

@operation
def group(state, host, name, present: bool = ..., system: bool = ..., gid: Optional[Any] = ...):
    '''
    Add/remove system groups.

    + name: name of the group to ensure
    + present: whether the group should be present or not
    + system: whether to create a system group

    System users:
        System users don't exist on BSD, so the argument is ignored for BSD targets.

    Examples:

    .. code:: python

        server.group(
            {'Create docker group'},
            'docker',
        )

        # multiple groups
        for group in ['wheel', 'lusers']:
            server.group(
                {f'Create the group {group}'},
                group,
            )


    '''
    ...

@operation
def user(state, host, name, present: bool = ..., home: Optional[Any] = ..., shell: Optional[Any] = ..., group: Optional[Any] = ..., groups: Optional[Any] = ..., public_keys: Optional[Any] = ..., delete_keys: bool = ..., ensure_home: bool = ..., system: bool = ..., uid: Optional[Any] = ...):
    '''
    Add/remove/update system users & their ssh `authorized_keys`.

    + name: name of the user to ensure
    + present: whether this user should exist
    + home: the users home directory
    + shell: the users shell
    + group: the users primary group
    + groups: the users secondary groups
    + public_keys: list of public keys to attach to this user, ``home`` must be specified
    + delete_keys: whether to remove any keys not specified in ``public_keys``
    + ensure_home: whether to ensure the ``home`` directory exists
    + system: whether to create a system account

    Home directory:
        When ``ensure_home`` or ``public_keys`` are provided, ``home`` defaults to
        ``/home/{name}``.

    Examples:

    .. code:: python

        server.user(
            {'Ensure user is removed'},
            'kevin',
            present=False,
        )

        server.user(
            {'Ensure myweb user exists'},
            'myweb',
            shell='/bin/bash',
        )

        # multiple users
        for user in ['kevin', 'bob']:
            server.user(
                {f'Ensure user {user} is removed'},
                user,
                present=False,
            )

    '''
    ...

