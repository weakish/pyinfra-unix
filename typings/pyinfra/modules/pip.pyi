"""
This type stub file was generated by pyright.
"""

from pyinfra.api import operation
from typing import Any, Optional

'''
Manage pip (python) packages. Compatible globally or inside
a virtualenv (virtual environment).
'''
@operation
def virtualenv(state, host, path, python: Optional[Any] = ..., site_packages: bool = ..., always_copy: bool = ..., present: bool = ...):
    '''
    Add/remove Python virtualenvs.

    + python: python interpreter to use
    + site_packages: give access to the global site-packages
    + always_copy: always copy files rather than symlinking
    + present: whether the virtualenv should exist

    Example:

    .. code:: python

        pip.virtualenv(
            {'Create a virtualenv'},
            '/usr/local/bin/venv',
        )
    '''
    ...

_virtualenv = virtualenv
@operation
def packages(state, host, packages: Optional[Any] = ..., present: bool = ..., latest: bool = ..., requirements: Optional[Any] = ..., pip=..., virtualenv: Optional[Any] = ..., virtualenv_kwargs: Optional[Any] = ...):
    '''
    Install/remove/update pip packages.

    + packages: list of packages to ensure
    + present: whether the packages should be installed
    + latest: whether to upgrade packages without a specified version
    + requirements: location of requirements file to install
    + pip: name or path of the pip directory to use
    + virtualenv: root directory of virtualenv to work in
    + virtualenv_kwargs: dictionary of arguments to pass to ``pip.virtualenv``

    Virtualenv:
        This will be created if it does not exist already. ``virtualenv_kwargs``
        will be passed to ``pip.virtualenv`` which can be used to control how
        the env is created.

    Versions:
        Package versions can be pinned like pip: ``<pkg>==<version>``.

    Example:

    .. code:: python

        pip.packages(
            {'Install pyinfra into a virtualenv'},
            'pyinfra',
            virtualenv='/usr/local/bin/venv',
        )
    '''
    ...

