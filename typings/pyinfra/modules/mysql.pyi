"""
This type stub file was generated by pyright.
"""

from pyinfra.api import operation
from typing import Any, Optional

'''
Manage MySQL databases, users and privileges.

Requires the ``mysql`` CLI executable on the target host(s).

All operations in this module take four optional global arguments:
    + ``mysql_user``: the username to connect to mysql to
    + ``mysql_password``: the password for the connecting user
    + ``mysql_host``: the hostname of the server to connect to
    + ``mysql_port``: the port of the server to connect to

See the example/mysql.py

'''
@operation
def sql(state, host, sql, database: Optional[Any] = ..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
    '''
    Execute arbitrary SQL against MySQL.

    + sql: SQL command(s) to execute
    + database: optional database to open the connection with
    + mysql_*: global module arguments, see above
    '''
    ...

@operation
def user(state, host, name, present: bool = ..., user_hostname=..., password: Optional[Any] = ..., privileges: Optional[Any] = ..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
    '''
    Add/remove/update MySQL users.

    + name: the name of the user
    + present: whether the user should exist or not
    + user_hostname: the hostname of the user
    + password: the password of the user (if created)
    + privileges: the global privileges for this user
    + mysql_*: global module arguments, see above

    Hostname:
        this + ``name`` makes the username - so changing this will create a new
        user, rather than update users with the same ``name``.

    Password:
        will only be applied if the user does not exist - ie pyinfra cannot
        detect if the current password doesn't match the one provided, so won't
        attempt to change it.

    Example:

    .. code:: python

        mysql.user(
            {'Create the pyinfra@localhost MySQL user'},
            'pyinfra',
            password='somepassword',
        )
    '''
    ...

@operation
def database(state, host, name, present: bool = ..., collate: Optional[Any] = ..., charset: Optional[Any] = ..., user: Optional[Any] = ..., user_hostname=..., user_privileges=..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
    '''
    Add/remove MySQL databases.

    + name: the name of the database
    + present: whether the database should exist or not
    + collate: the collate to use when creating the database
    + charset: the charset to use when creating the database
    + user: MySQL user to grant privileges on this database to
    + user_hostname: the hostname of the MySQL user to grant
    + user_privileges: privileges to grant to any specified user
    + mysql_*: global module arguments, see above

    Collate/charset:
        these will only be applied if the database does not exist - ie pyinfra
        will not attempt to alter the existing databases collate/character sets.

    Example:

    .. code:: python

        mysql.database(
            {'Create the pyinfra_stuff database'},
            'pyinfra_stuff',
            user='pyinfra',
            user_privileges=['SELECT', 'INSERT'],
            charset='utf8',
        )

    '''
    ...

@operation
def privileges(state, host, user, privileges, user_hostname=..., database=..., table=..., present: bool = ..., flush: bool = ..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
    '''
    Add/remove MySQL privileges for a user, either global, database or table specific.

    + user: name of the user to manage privileges for
    + privileges: list of privileges the user should have
    + user_hostname: the hostname of the user
    + database: name of the database to grant privileges to (defaults to all)
    + table: name of the table to grant privileges to (defaults to all)
    + present: whether these privileges should exist (False to ``REVOKE)
    + flush: whether to flush (and update) the privileges table after any changes
    + mysql_*: global module arguments, see above
    '''
    ...

_privileges = privileges
@operation
def dump(state, host, remote_filename, database: Optional[Any] = ..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
    '''
    Dump a MySQL database into a ``.sql`` file. Requires ``mysqldump``.

    + database: name of the database to dump
    + remote_filename: name of the file to dump the SQL to
    + mysql_*: global module arguments, see above

    Example:

    .. code:: python

        mysql.dump(
            {'Dump the pyinfra_stuff database'},
            '/tmp/pyinfra_stuff.dump',
            database='pyinfra_stuff',
        )
    '''
    ...

@operation
def load(state, host, remote_filename, database: Optional[Any] = ..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
    '''
    Load ``.sql`` file into a database.

    + database: name of the database to import into
    + remote_filename: the filename to read from
    + mysql_*: global module arguments, see above

    Example:

    .. code:: python

        mysql.load(
            {'Import the pyinfra_stuff dump into pyinfra_stuff_copy'},
            '/tmp/pyinfra_stuff.dump',
            database='pyinfra_stuff_copy',
        )
    '''
    ...

