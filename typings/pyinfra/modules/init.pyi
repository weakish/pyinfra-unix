"""
This type stub file was generated by pyright.
"""

from pyinfra.api import operation
from typing import Any, Optional

'''
Manages the state and configuration of init services. Support for:

+ SysVinit (/etc/init.d)
+ BSD init (/etc/rc.d)
+ Upstart
+ Systemctl
'''
def _handle_service_control(name, statuses, formatter, running, restarted, reloaded, command, status_argument=...):
    ...

@operation
def d(state, host, name, running: bool = ..., restarted: bool = ..., reloaded: bool = ..., enabled: Optional[Any] = ..., command: Optional[Any] = ...):
    '''
    Manage the state of SysV Init (/etc/init.d) services.

    + name: name of the service to manage
    + running: whether the service should be running
    + restarted: whether the service should be restarted
    + reloaded: whether the service should be reloaded
    + enabled: whether this service should be enabled/disabled
    + command: command (eg. reload) to run like: ``/etc/init.d/<name> <command>``

    Enabled:
        Because managing /etc/rc.d/X files is a mess, only certain Linux distributions
        support enabling/disabling services:

        + Ubuntu/Debian (``update-rc.d``)
        + CentOS/Fedora/RHEL (``chkconfig``)
        + Gentoo (``rc-update``)

        For other distributions and more granular service control, see the
        ``init.d_enable`` operation.

    Example:

    .. code:: python

        init.d(
            {'Restart and enable rsyslog'},
            'rsyslog',
            restarted=True,
            enabled=True,
        )
    '''
    ...

@operation
def d_enable(state, host, name, start_priority=..., stop_priority=..., start_levels=..., stop_levels=...):
    '''
    Manually enable /etc/init.d scripts by creating /etc/rcX.d/Y links.

    + name: name of the service to enable
    + start_priority: priority to start the service
    + stop_priority: priority to stop the service
    + start_levels: which runlevels should the service run when enabled
    + stop_levels: which runlevels should the service stop when enabled

    Example:

    .. code:: python

        init.d_enable(
            {'Finer control on which runlevels rsyslog should run'},
            'rsyslog',
            start_levels=(3, 4, 5),
            stop_levels=(0, 1, 2, 6),
        )
    '''
    ...

@operation
def rc(state, host, name, running: bool = ..., restarted: bool = ..., reloaded: bool = ..., command: Optional[Any] = ..., enabled: Optional[Any] = ...):
    '''
    Manage the state of BSD init (/etc/rc.d) services.

    + name: name of the service to manage
    + running: whether the service should be running
    + restarted: whether the service should be restarted
    + reloaded: whether the service should be reloaded
    + command: custom command to pass like: ``/etc/rc.d/<name> <command>``
    + enabled: whether this service should be enabled/disabled on boot
    '''
    ...

@operation
def upstart(state, host, name, running: bool = ..., restarted: bool = ..., reloaded: bool = ..., command: Optional[Any] = ..., enabled: Optional[Any] = ...):
    '''
    Manage the state of upstart managed services.

    + name: name of the service to manage
    + running: whether the service should be running
    + restarted: whether the service should be restarted
    + reloaded: whether the service should be reloaded
    + command: custom command to pass like: ``/etc/rc.d/<name> <command>``
    + enabled: whether this service should be enabled/disabled on boot

    Enabling/disabling services:
        Upstart jobs define runlevels in their config files - as such there is no way to
        edit/list these without fiddling with the config. So pyinfra simply manages the
        existence of a ``/etc/init/<service>.override`` file, and sets its content to
        "manual" to disable automatic start of services.
    '''
    ...

@operation
def systemd(state, host, name, running: bool = ..., restarted: bool = ..., reloaded: bool = ..., command: Optional[Any] = ..., enabled: Optional[Any] = ..., daemon_reload: bool = ...):
    '''
    Manage the state of systemd managed services.

    + name: name of the service to manage
    + running: whether the service should be running
    + restarted: whether the service should be restarted
    + reloaded: whether the service should be reloaded
    + command: custom command to pass like: ``/etc/rc.d/<name> <command>``
    + enabled: whether this service should be enabled/disabled on boot
    + daemon_reload: reload the systemd daemon to read updated unit files

    Example:

    .. code:: python

        init.systemd(
            {'Restart and enable dnsmasq'},
            'dnsmasq',
            running=True,
            restarted=True,
            enabled=True,
        )

    '''
    ...

@operation
def launchd(state, host, name, running: bool = ..., restarted: bool = ..., command: Optional[Any] = ...):
    '''
    Manage the state of systemd managed services.

    + name: name of the service to manage
    + running: whether the service should be running
    + restarted: whether the service should be restarted
    + command: custom command to pass like: ``/etc/rc.d/<name> <command>``
    + enabled: whether this service should be enabled/disabled on boot
    + daemon_reload: reload the systemd daemon to read updated unit files
    '''
    ...

@operation
def service(state, host, *args, **kwargs):
    '''
    Manage the state of services. This command checks for the presence of all the
    init systems pyinfra can handle and executes the relevant operation. See init
    system sepcific operation for arguments.

    Example:

    .. code:: python

        init.service(
            {'Enable open-vm-tools service'},
            'open-vm-tools',
            enabled=True,
        )
    '''
    ...

