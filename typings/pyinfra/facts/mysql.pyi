"""
This type stub file was generated by pyright.
"""

import re
from pyinfra.api import FactBase
from typing import Any, Optional

def make_mysql_command(database: Optional[Any] = ..., user: Optional[Any] = ..., password: Optional[Any] = ..., host: Optional[Any] = ..., port: Optional[Any] = ..., executable=...):
    ...

def make_execute_mysql_command(command, **mysql_kwargs):
    ...

class MysqlFactBase(FactBase):
    abstract = ...
    def command(self, mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
        ...
    


class MysqlDatabases(MysqlFactBase):
    '''
    Returns a dict of existing MySQL databases and associated data:

    .. code:: python

        'mysql': {
            'character_set': 'latin1',
            'collation_name': 'latin1_swedish_ci'
        },
        ...
    '''
    default = ...
    mysql_command = ...
    def process(self, output):
        ...
    


class MysqlUsers(MysqlFactBase):
    '''
    Returns a dict of MySQL ``user@host``'s and their associated data:

    .. code:: python

        'user@host': {
            'privileges': ['Alter', 'Grant'],
            'max_connections': 5,
            ...
        },
        ...
    '''
    default = ...
    mysql_command = ...
    @staticmethod
    def process(output):
        ...
    


MYSQL_GRANT_REGEX = re.compile(r"^GRANT ([A-Z,\s]+) ON (\*|`[a-z_\\]+`\.\*|'[a-z_]+') TO '[a-z_]+'@'[a-z]+'(.*)")
class MysqlUserGrants(MysqlFactBase):
    '''
    Returns a dict of ``<database>`.<table>`` with granted privileges for each:

    .. code:: python

        '`pyinfra_stuff`.*': {
            'privileges': [
                'SELECT',
                'INSERT'
            ],
            "with_grant_option": false
        },
        ...
    '''
    default = ...
    def command(self, user, hostname=..., mysql_user: Optional[Any] = ..., mysql_password: Optional[Any] = ..., mysql_host: Optional[Any] = ..., mysql_port: Optional[Any] = ...):
        self.mysql_command = ...
    
    @staticmethod
    def process(output):
        ...
    


